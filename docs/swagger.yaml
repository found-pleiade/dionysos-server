definitions:
  models.Room:
    properties:
      name:
        example: BirthdayParty
        maxLength: 20
        minLength: 2
        type: string
      ownerID:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    required:
    - name
    type: object
  models.RoomUpdate:
    properties:
      name:
        example: BirthdayParty
        maxLength: 20
        minLength: 2
        type: string
    type: object
  models.User:
    properties:
      id:
        type: integer
      name:
        example: Diablox9
        maxLength: 20
        minLength: 2
        type: string
    required:
    - name
    type: object
  models.UserUpdate:
    properties:
      name:
        example: Diablox9
        maxLength: 20
        minLength: 2
        type: string
    type: object
  utils.CreateResponse:
    properties:
      password:
        description: Only set for user creation
        type: string
      uri:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
info:
  contact:
    name: API Support
    url: https://github.com/Brawdunoir/dionysos-server/issues
  description: API instance for the Dionysos client application.
  license:
    name: GNU General Public License v3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  title: Dionysos
paths:
  /rooms:
    post:
      consumes:
      - application/json
      parameters:
      - description: Room object
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/models.RoomUpdate'
      produces:
      - application/json
      responses:
        "201":
          description: Room created
          schema:
            $ref: '#/definitions/utils.CreateResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Invalid user in auth method
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Creates a room.
      tags:
      - Rooms
  /rooms/{id}:
    get:
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Room'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Room not found or invalid user in auth method
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Gets a room.
      tags:
      - Rooms
    patch:
      consumes:
      - application/json
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      - description: Room object
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/models.RoomUpdate'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Room not found or invalid user in auth method
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Updates a room.
      tags:
      - Rooms
  /rooms/{id}/connect:
    patch:
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Room not found or invalid user in auth method
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: User already in room
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Connects a user to a room.
      tags:
      - Rooms
  /rooms/{id}/disconnect:
    patch:
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Room not found or invalid user in auth method
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Disconnects a user from a room.
      tags:
      - Rooms
  /rooms/{id}/kick/{userid}:
    patch:
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Room not found or invalid user in auth method
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Kicks a user from a room.
      tags:
      - Rooms
  /rooms/{id}/stream:
    get:
      description: |-
        This endpoint is used to subscribe to a SSE stream for a given room.
        The stream will send an event when a room is updated.
        A room is updated when a user connects or disconnects from it, or when we have a owner change, and so on.
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/event-stream
      responses:
        "200":
          description: Send \"RoomUpdate\" event each time room is updated. Send 200
            when stream is closed
        "401":
          description: User not authorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Room not found or invalid user in auth method
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BasicAuth: []
      summary: SSE stream of a room for any updates.
      tags:
      - Rooms
      - SSE
  /users:
    post:
      consumes:
      - application/json
      description: Creates a user. You will need to use BasicAuth to authenticate
        with the created user, using its ID and password produced by this endpoint.
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdate'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            $ref: '#/definitions/utils.CreateResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Creates a user. Needed for further request during authentication.
      tags:
      - Users
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Deletes a user. Should be used when disconnecting a user.
      tags:
      - Users
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Gets a user.
      tags:
      - Users
    patch:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdate'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Updates a user.
      tags:
      - Users
  /version:
    get:
      produces:
      - text/plain
      responses:
        "200":
          description: Version as x.x.x
          schema:
            type: string
        "500":
          description: Version has not been set correctly on the server side
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get the api version.
      tags:
      - Misc
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
